name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
#  flutter_test:
#    name: Run flutter test and analyze
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v1
#        with:
#          java-version: "12.x"
#      - uses: subosito/flutter-action@v1
#        with:
#          channel: "stable"
#      - run: flutter pub get
#      - run: flutter analyze
#      - run: flutter test
  flutter_integration_test:
    name: Run flutter integration test
#    needs: [ flutter_test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - run: flutter pub get
#      - name: Check if emulator is running
#        id: check_emulator
#        run: echo ::set-output name=RUNNING::$(adb devices | grep emulator)
      - name: Set up emulator
#        if: steps.check_emulator.outputs.RUNNING == ''
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 29
          script: ./gradlew connectedCheck
#      - name: Start emulator
#        if: steps.check_emulator.outputs.RUNNING == ''
#        run: emulator -avd emulator-29 -no-window -no-audio -no-boot-anim &
#      - name: Wait for emulator to start
#        run: android-wait-for-emulator
      - name: Run integration tests
        run: flutter test integration_test
      - name: Stop emulator
        run: adb emu kill
#  build_apk:
#    name: Build Flutter (Android)
#    needs: [ flutter_integration_test ]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v1
#        with:
#          java-version: "12.x"
#      - uses: subosito/flutter-action@v1
#        with:
#          channel: "stable"
#      - run: flutter clean
#      - run: flutter pub get
#      - run: flutter build apk
#      - name: Upload apk as Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: flutter-apk
#          path: build/app/outputs/flutter-apk
#  build_ios:
#    name: Build Flutter (iOS)
#    needs: [ build_apk ]
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-java@v1
#        with:
#          java-version: "12.x"
#      - uses: subosito/flutter-action@v1
#        with:
#          channel: "stable"
#      - run: flutter clean
#      - run: flutter pub get
#      - run: flutter build ios --no-codesign
#      - run: mkdir -p $HOME/artifacts
#      - run: |
#          if [ -f build/ios/iphones/Runner.app/Runner.ipa ]; then
#            mv build/ios/iphones/Runner.app/Runner.ipa $HOME/artifacts/app.ipa
#          fi
#      - name: Upload ipa as Artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: flutter-ipa
#          path: $HOME/artifacts/app.ipa

